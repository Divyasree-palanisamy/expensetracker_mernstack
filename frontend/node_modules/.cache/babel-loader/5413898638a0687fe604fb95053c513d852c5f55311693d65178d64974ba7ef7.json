{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\divya\\\\Pictures\\\\MERN-PROJECT\\\\frontend\\\\src\\\\components\\\\DarkModeToggle.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport './DarkModeToggle.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst DarkModeToggle = () => {\n  _s();\n  const [isDarkMode, setIsDarkMode] = useState(() => {\n    const saved = localStorage.getItem('darkMode');\n    return saved ? JSON.parse(saved) : true; // Default to dark mode\n  });\n  useEffect(() => {\n    localStorage.setItem('darkMode', JSON.stringify(isDarkMode));\n    document.documentElement.setAttribute('data-theme', isDarkMode ? 'dark' : 'light');\n  }, [isDarkMode]);\n  const toggleTheme = () => {\n    setIsDarkMode(!isDarkMode);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"dark-mode-toggle\",\n    children: /*#__PURE__*/_jsxDEV(\"button\", {\n      className: `toggle-btn ${isDarkMode ? 'dark' : 'light'}`,\n      onClick: toggleTheme,\n      \"aria-label\": `Switch to ${isDarkMode ? 'light' : 'dark'} mode`,\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"toggle-icon\",\n        children: isDarkMode ? 'üåô' : '‚òÄÔ∏è'\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 26,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n        className: \"toggle-label\",\n        children: [isDarkMode ? 'Dark' : 'Light', \" Mode\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 29,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 21,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 20,\n    columnNumber: 9\n  }, this);\n};\n_s(DarkModeToggle, \"Npa2efuBkc6AjWtpQ3znf/UCwMo=\");\n_c = DarkModeToggle;\nexport default DarkModeToggle;\nvar _c;\n$RefreshReg$(_c, \"DarkModeToggle\");","map":{"version":3,"names":["React","useState","useEffect","jsxDEV","_jsxDEV","DarkModeToggle","_s","isDarkMode","setIsDarkMode","saved","localStorage","getItem","JSON","parse","setItem","stringify","document","documentElement","setAttribute","toggleTheme","className","children","onClick","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/divya/Pictures/MERN-PROJECT/frontend/src/components/DarkModeToggle.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport './DarkModeToggle.css';\r\n\r\nconst DarkModeToggle = () => {\r\n    const [isDarkMode, setIsDarkMode] = useState(() => {\r\n        const saved = localStorage.getItem('darkMode');\r\n        return saved ? JSON.parse(saved) : true; // Default to dark mode\r\n    });\r\n\r\n    useEffect(() => {\r\n        localStorage.setItem('darkMode', JSON.stringify(isDarkMode));\r\n        document.documentElement.setAttribute('data-theme', isDarkMode ? 'dark' : 'light');\r\n    }, [isDarkMode]);\r\n\r\n    const toggleTheme = () => {\r\n        setIsDarkMode(!isDarkMode);\r\n    };\r\n\r\n    return (\r\n        <div className=\"dark-mode-toggle\">\r\n            <button\r\n                className={`toggle-btn ${isDarkMode ? 'dark' : 'light'}`}\r\n                onClick={toggleTheme}\r\n                aria-label={`Switch to ${isDarkMode ? 'light' : 'dark'} mode`}\r\n            >\r\n                <div className=\"toggle-icon\">\r\n                    {isDarkMode ? 'üåô' : '‚òÄÔ∏è'}\r\n                </div>\r\n                <span className=\"toggle-label\">\r\n                    {isDarkMode ? 'Dark' : 'Light'} Mode\r\n                </span>\r\n            </button>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default DarkModeToggle; "],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAClD,OAAO,sBAAsB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE9B,MAAMC,cAAc,GAAGA,CAAA,KAAM;EAAAC,EAAA;EACzB,MAAM,CAACC,UAAU,EAAEC,aAAa,CAAC,GAAGP,QAAQ,CAAC,MAAM;IAC/C,MAAMQ,KAAK,GAAGC,YAAY,CAACC,OAAO,CAAC,UAAU,CAAC;IAC9C,OAAOF,KAAK,GAAGG,IAAI,CAACC,KAAK,CAACJ,KAAK,CAAC,GAAG,IAAI,CAAC,CAAC;EAC7C,CAAC,CAAC;EAEFP,SAAS,CAAC,MAAM;IACZQ,YAAY,CAACI,OAAO,CAAC,UAAU,EAAEF,IAAI,CAACG,SAAS,CAACR,UAAU,CAAC,CAAC;IAC5DS,QAAQ,CAACC,eAAe,CAACC,YAAY,CAAC,YAAY,EAAEX,UAAU,GAAG,MAAM,GAAG,OAAO,CAAC;EACtF,CAAC,EAAE,CAACA,UAAU,CAAC,CAAC;EAEhB,MAAMY,WAAW,GAAGA,CAAA,KAAM;IACtBX,aAAa,CAAC,CAACD,UAAU,CAAC;EAC9B,CAAC;EAED,oBACIH,OAAA;IAAKgB,SAAS,EAAC,kBAAkB;IAAAC,QAAA,eAC7BjB,OAAA;MACIgB,SAAS,EAAE,cAAcb,UAAU,GAAG,MAAM,GAAG,OAAO,EAAG;MACzDe,OAAO,EAAEH,WAAY;MACrB,cAAY,aAAaZ,UAAU,GAAG,OAAO,GAAG,MAAM,OAAQ;MAAAc,QAAA,gBAE9DjB,OAAA;QAAKgB,SAAS,EAAC,aAAa;QAAAC,QAAA,EACvBd,UAAU,GAAG,IAAI,GAAG;MAAI;QAAAgB,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACxB,CAAC,eACNtB,OAAA;QAAMgB,SAAS,EAAC,cAAc;QAAAC,QAAA,GACzBd,UAAU,GAAG,MAAM,GAAG,OAAO,EAAC,OACnC;MAAA;QAAAgB,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAM,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACH;EAAC;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACR,CAAC;AAEd,CAAC;AAACpB,EAAA,CA/BID,cAAc;AAAAsB,EAAA,GAAdtB,cAAc;AAiCpB,eAAeA,cAAc;AAAC,IAAAsB,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}